# Todas las prueba sunitarias importan la biblioteca unittest
import unittest
# Las pruebas importan los modulos que hacen el trabajo
import PaymentLogic 


# Debe existir por lo menos una clase que contenga las pruyebas unitarias
# descediente de unittest.TestCase
class CreditCardTest(unittest.TestCase):

    # Cada prueba unitaria es un metodo la clase
    def test_Payment1(self):
        # Cada metodo de prueba debe llamar un metodo assert
        # para comprobar si la prueba pasa
        # Datos de Entrada
        purchase_amount = 200000
        interest_rate = 0.031
        num_payments = 36

        # Proceso
        result = PaymentLogic.calcPayment( purchase_amount, interest_rate, num_payments )

        # Datos de salida esperados
        expected = 9297.96

        # Prueba que dos variables sean iguales
        self.assertAlmostEqual( expected, result, 2  )

    def test_ExcesiveInterest( self ):
        # Entradas
        purchase_amount = 50000
        num_payments = 36
        interest_rate = 0.124

        testOk = False  # Bandera para indicar si la prueba es exitosa
        try:
            # llamar al proceso
            result = PaymentLogic.calcPayment( purchase_amount, interest_rate, num_payments )
            print("No ocurrió ningun excepcion")
            testOk = False
        except:
            # Aqui llega el control cuando se genera una excepcion
            print("SI ocurrio la excepcion")
            testOk = True

        self.assertTrue(  testOk, "No se disparó la excepcion esperada" )            

    def test_ExcesiveInterestOneLine( self ):
        # Entradas
        purchase_amount = 50000
        num_payments = 36
        interest_rate = 0.124

        # Verifica en una linea si una funcion dispara una excepcion
        self.assertRaises( Exception, PaymentLogic.calcPayment, purchase_amount, interest_rate, num_payments  )

    def test_invalid_num_payments(self):
        purchase_amount = 10000
        interest_rate = 0.124
        num_payments = 0
        try:
            result = PaymentLogic.calcPayment(purchase_amount, interest_rate, num_payments)
        except PaymentLogic.Invalid_num_payments as e:
            print(f"Excepción capturada: {e.__doc__}")
            # La excepción fue capturada correctamente, la prueba pasa
   


    def test_invalid_purchase_amount(self):
        purchase_amount = 0
        interest_rate = 0.12
        num_payments = 5
        try:
            result = PaymentLogic.calcPayment(purchase_amount, interest_rate, num_payments)
        except PaymentLogic.Invalid_purchase_amount as e:
            print(f"Excepcion capturada: {e.__doc__}")
            # Se capturó una excepción ValueError, la prueba pasa


    def test_hola1(self):
        pass               




# Este fragmento de codigo permite ejecutar la prueb individualmente
# Va fijo en todas las pruebas
if __name__ == '__main__':
    # print( Payment.calcularCuota.__doc__)
    unittest.main()
